<?xml version="1.0" encoding="UTF-8"?>
<Shell xmlns="http://xamarin.com/schemas/2014/forms" 
       xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
       xmlns:local="clr-namespace:FoldTheDishes.Views"
       Title="FoldTheDishes"
       x:Class="FoldTheDishes.AppShell"
       FlyoutBackgroundColor="{AppThemeBinding Dark={StaticResource HeaderBarDark}, 
                        Light={StaticResource SecondaryBackgroundLight}}">

    <!--
        The overall app visual hierarchy is defined here, along with navigation.
    
        https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/
    -->

    <Shell.Resources>
        <ResourceDictionary>
            <Style x:Key="BaseStyle" TargetType="Element">
                <Setter Property="Shell.BackgroundColor" 
            Value="{AppThemeBinding Dark={StaticResource HeaderBarDark}, 
                        Light={StaticResource HeaderBarLight}}" />
                <Setter Property="Shell.ForegroundColor" 
            Value="{AppThemeBinding Dark={StaticResource PrimaryTextLight}, 
                        Light={StaticResource PrimaryTextLight}}" />
                <Setter Property="Shell.TitleColor" Value="{AppThemeBinding Dark={StaticResource PrimaryTextLight}, 
                        Light={StaticResource PrimaryTextLight}}"/>
                <Setter Property="Shell.DisabledColor" Value="{AppThemeBinding Dark={StaticResource ColorPrimaryDisabled}, 
                        Light={StaticResource ColorPrimaryDisabled}}" />
                <Setter Property="Shell.UnselectedColor" Value="#95FFFFFF" />
                <Setter Property="Shell.TabBarBackgroundColor"
            Value="{AppThemeBinding Dark={StaticResource HeaderBarDark}, 
                        Light={StaticResource HeaderBarLight}}"/>
                <Setter Property="Shell.TabBarForegroundColor" 
            Value="{AppThemeBinding Dark={StaticResource PrimaryTextLight}, 
                        Light={StaticResource PrimaryTextLight}}"/>
                <Setter Property="Shell.TabBarUnselectedColor" Value="#95FFFFFF"/>
                <Setter Property="Shell.TabBarTitleColor"
            Value="{AppThemeBinding Dark={StaticResource PrimaryTextLight}, 
                        Light={StaticResource PrimaryTextLight}}"/>
            </Style>
            <Style TargetType="TabBar" BasedOn="{StaticResource BaseStyle}" />
            <Style TargetType="FlyoutItem" BasedOn="{StaticResource BaseStyle}" />

            <Style Class="FlyoutItemLabelStyle" TargetType="Label">
                <Setter Property="TextColor" Value="{AppThemeBinding Dark={StaticResource PrimaryTextLight}, 
            Light={StaticResource PrimaryTextDark}}"></Setter>
            </Style>
            <Style Class="FlyoutItemLayoutStyle" TargetType="Layout" ApplyToDerivedTypes="True">
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal">
                                <VisualState.Setters>
                                    <Setter Property="BackgroundColor" 
                                Value="{AppThemeBinding Dark={StaticResource SecondaryBackgroundDark}, 
                        Light={StaticResource SecondaryBackgroundLight}}" />
                                    <Setter TargetName="FlyoutItemLabel" 
                                Property="Label.TextColor" 
                                Value="{AppThemeBinding Dark={StaticResource PrimaryTextLight}, 
                        Light={StaticResource PrimaryTextDark}}" />
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Selected">
                                <VisualState.Setters>
                                    <Setter Property="BackgroundColor" 
                                Value="{AppThemeBinding Dark={StaticResource SelectedBackgroundDark}, 
                        Light={StaticResource SelectedBackgroundLight}}"/>
                                    <Setter TargetName="FlyoutItemLabel" 
                                Property="Label.TextColor" 
                                Value="{AppThemeBinding Dark={StaticResource PrimaryTextLight}, 
                        Light={StaticResource PrimaryTextDark}}" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>

            <!--
            Custom Style you can apply to any Flyout Item
            -->
            <Style Class="MenuItemLayoutStyle" TargetType="Layout" ApplyToDerivedTypes="True">
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal">
                                <VisualState.Setters>
                                    <Setter TargetName="FlyoutItemLabel" 
                                Property="Label.TextColor" 
                                Value="{AppThemeBinding Dark={StaticResource PrimaryTextLight}, Light={StaticResource PrimaryTextLight}}"/>
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Shell.Resources>

    <!-- 
        When the Flyout is visible this defines the content to display in the flyout.
        FlyoutDisplayOptions="AsMultipleItems" will create a separate flyout item for each child element    
        https://docs.microsoft.com/dotnet/api/xamarin.forms.shellgroupitem.flyoutdisplayoptions?view=xamarin-forms
    -->
    <FlyoutItem Title="Reminders">
        <FlyoutItem.Icon>
            <FontImageSource Glyph="{StaticResource IconBulletList}" FontFamily="FA-S"/>
        </FlyoutItem.Icon>
        <ShellContent Route="RemindersPage" ContentTemplate="{DataTemplate local:RemindersPage}" />
    </FlyoutItem>

    <!-- When the Flyout is visible this will be a menu item you can tie a click behavior to  -->
    <!--<MenuItem Text="Logout" StyleClass="MenuItemLayoutStyle" Clicked="OnMenuItemClicked">
    </MenuItem>-->

    <!--
        TabBar lets you define content that won't show up in a flyout menu. When this content is active
        the flyout menu won't be available. This is useful for creating areas of the application where 
        you don't want users to be able to navigate away from. If you would like to navigate to this 
        content you can do so by calling 
        await Shell.Current.GoToAsync("//LoginPage");
    -->
    <!--<TabBar>
        <ShellContent Route="LoginPage" ContentTemplate="{DataTemplate local:LoginPage}" />
    </TabBar>-->

     <!--Optional Templates 
    // These may be provided inline as below or as separate classes.-->

    <!--// This header appears at the top of the Flyout.
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#flyout-header-->
    <Shell.FlyoutHeaderTemplate>
        <DataTemplate>
            <Image Source="ic_launcher.png" VerticalOptions="CenterAndExpand" HorizontalOptions="CenterAndExpand" Aspect="AspectFill"/>
        </DataTemplate>
    </Shell.FlyoutHeaderTemplate>

    <!--// ItemTemplate is for ShellItems as displayed in a Flyout
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#define-flyoutitem-appearance
    <Shell.ItemTemplate>
        <DataTemplate>
            <ContentView>
                Bindable Properties: Title, Icon
            </ContentView>
        </DataTemplate>
    </Shell.ItemTemplate>

    // MenuItemTemplate is for MenuItems as displayed in a Flyout
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#define-menuitem-appearance
    <Shell.MenuItemTemplate>
        <DataTemplate>
            <ContentView>
                Bindable Properties: Text, Icon
            </ContentView>
        </DataTemplate>
    </Shell.MenuItemTemplate>-->
</Shell>
